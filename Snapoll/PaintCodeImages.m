//
//  PaintCodeImages.m
//  Snapoll
//
//  Created by Richard Lichkus on 7/13/14.
//  Copyright (c) 2014 CleverKnot LLC. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "PaintCodeImages.h"


@implementation PaintCodeImages

#pragma mark Cache

static UIColor* _snapollGreen = nil;
static UIColor* _snapollHighlightGreen = nil;
static UIColor* _snapollSelectedGreen = nil;
static UIColor* _loginSelectedBlue = nil;
static UIColor* _loginNormalBlue = nil;

static UIImage* _bird_blue_48 = nil;
static UIImage* _fBfLogoBluebroadcast = nil;

static UIImage* _imageOfCanvas1 = nil;
static UIImage* _imageOfCircleXIcon = nil;
static UIImage* _imageOfCirclePlus = nil;
static UIImage* _imageOfCircleXBadge = nil;
static UIImage* _imageOfCircleLeftBackArrow = nil;
static UIImage* _imageOfEmailSymbol = nil;
static UIImage* _imageOfFacebookSymbol = nil;
static UIImage* _imageOfTwitterSymbol = nil;
static UIImage* _imageOfLoginBackground = nil;
static UIImage* _imageOfBBPlaceholderAvatar = nil;
static UIImage* _imageOfCanvas2 = nil;
static UIImage* _imageOfCirclePlusIconHighlighted = nil;
static UIImage* _imageOfProfileBackground = nil;
static UIImage* _imageOfEventIcon = nil;
static UIImage* _imageOfPollIcon = nil;
static UIImage* _imageOfAddIcon = nil;
static UIImage* _imageOfMinusIcon = nil;
static UIImage* _imageOfCircleRightBackArrow = nil;
static UIImage* _imageOfEdit = nil;
static UIImage* _imageOfClock = nil;
static UIImage* _imageOfLocationPin = nil;
static UIImage* _imageOfPerson = nil;
static UIImage* _imageOfQuestionMark = nil;
static UIImage* _imageOfOpenLock = nil;
static UIImage* _imageOfClosedLock = nil;
static UIImage* _imageOfRadio = nil;
static UIImage* _imageOfSelectedRadio = nil;
static UIImage* _imageOfCheckBox = nil;
static UIImage* _imageOfSelectedCheckBox = nil;
static UIImage* _imageOfSpeedDial = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _snapollGreen = [UIColor colorWithRed: 0 green: 1 blue: 0.586 alpha: 1];
    CGFloat snapollGreenRGBA[4];
    [_snapollGreen getRed: &snapollGreenRGBA[0] green: &snapollGreenRGBA[1] blue: &snapollGreenRGBA[2] alpha: &snapollGreenRGBA[3]];

    CGFloat snapollGreenHSBA[4];
    [_snapollGreen getHue: &snapollGreenHSBA[0] saturation: &snapollGreenHSBA[1] brightness: &snapollGreenHSBA[2] alpha: &snapollGreenHSBA[3]];

    _snapollHighlightGreen = [UIColor colorWithRed: (snapollGreenRGBA[0] * 0.2 + 0.8) green: (snapollGreenRGBA[1] * 0.2 + 0.8) blue: (snapollGreenRGBA[2] * 0.2 + 0.8) alpha: (snapollGreenRGBA[3] * 0.2 + 0.8)];
    _snapollSelectedGreen = [UIColor colorWithHue: snapollGreenHSBA[0] saturation: snapollGreenHSBA[1] brightness: 0.5 alpha: snapollGreenHSBA[3]];
    _loginSelectedBlue = [UIColor colorWithRed: 0.062 green: 0.166 blue: 0.837 alpha: 1];
    _loginNormalBlue = [UIColor colorWithRed: 0.678 green: 0.843 blue: 1 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)snapollGreen { return _snapollGreen; }
+ (UIColor*)snapollHighlightGreen { return _snapollHighlightGreen; }
+ (UIColor*)snapollSelectedGreen { return _snapollSelectedGreen; }
+ (UIColor*)loginSelectedBlue { return _loginSelectedBlue; }
+ (UIColor*)loginNormalBlue { return _loginNormalBlue; }

#pragma mark Images

+ (UIImage*)bird_blue_48 { return _bird_blue_48 ?: (_bird_blue_48 = [UIImage imageNamed: @"bird_blue_48"]); }
+ (UIImage*)fBfLogoBluebroadcast { return _fBfLogoBluebroadcast ?: (_fBfLogoBluebroadcast = [UIImage imageNamed: @"fBfLogoBluebroadcast"]); }

#pragma mark Drawing Methods

+ (void)drawCanvas1;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(78, 68, 44, 44)];
    [UIColor.grayColor setFill];
    [rectangle3Path fill];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(212, 99, 22, 13) cornerRadius: 6];
    [UIColor.grayColor setFill];
    [rectangle2Path fill];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(222, 100, 11, 11)];
    [UIColor.greenColor setFill];
    [ovalPath fill];


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(211, 81, 22, 13) cornerRadius: 6];
    [UIColor.grayColor setFill];
    [rectanglePath fill];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(212, 82, 11, 11)];
    [UIColor.lightGrayColor setFill];
    [oval2Path fill];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [UIColor.blackColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Oval 4 Drawing
    UIBezierPath* oval4Path = UIBezierPath.bezierPath;
    [oval4Path moveToPoint: CGPointMake(178.77, 14)];
    [oval4Path addCurveToPoint: CGPointMake(146.62, 20.74) controlPoint1: CGPointMake(167.11, 14.09) controlPoint2: CGPointMake(155.51, 16.34)];
    [oval4Path addCurveToPoint: CGPointMake(135.62, 29.38) controlPoint1: CGPointMake(141.52, 23.26) controlPoint2: CGPointMake(137.85, 26.22)];
    oval4Path.lineCapStyle = kCGLineCapRound;

    [UIColor.lightGrayColor setStroke];
    oval4Path.lineWidth = 4;
    [oval4Path stroke];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
    [bezier3Path moveToPoint: CGPointMake(218.04, 15.08)];
    [bezier3Path addCurveToPoint: CGPointMake(218.04, 58.92) controlPoint1: CGPointMake(239.32, 27.19) controlPoint2: CGPointMake(239.32, 46.81)];
    [bezier3Path addCurveToPoint: CGPointMake(164.61, 66.83) controlPoint1: CGPointMake(203.57, 67.15) controlPoint2: CGPointMake(182.99, 69.79)];
    [bezier3Path addCurveToPoint: CGPointMake(137.5, 81.5) controlPoint1: CGPointMake(152.72, 73.89) controlPoint2: CGPointMake(137.5, 81.5)];
    [bezier3Path addCurveToPoint: CGPointMake(148.25, 62.4) controlPoint1: CGPointMake(137.5, 81.5) controlPoint2: CGPointMake(143.26, 72.23)];
    [bezier3Path addCurveToPoint: CGPointMake(140.96, 58.92) controlPoint1: CGPointMake(145.69, 61.38) controlPoint2: CGPointMake(143.25, 60.22)];
    [bezier3Path addCurveToPoint: CGPointMake(140.96, 15.08) controlPoint1: CGPointMake(119.68, 46.81) controlPoint2: CGPointMake(119.68, 27.19)];
    [bezier3Path addCurveToPoint: CGPointMake(218.04, 15.08) controlPoint1: CGPointMake(162.25, 2.97) controlPoint2: CGPointMake(196.75, 2.97)];
    [bezier3Path closePath];
    [UIColor.lightGrayColor setStroke];
    bezier3Path.lineWidth = 4;
    [bezier3Path stroke];


    //// Oval 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 40.5, 24.5);

    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-15, -15, 30, 30)];
    [UIColor.lightGrayColor setStroke];
    oval3Path.lineWidth = 3;
    [oval3Path stroke];

    CGContextRestoreGState(context);


    //// Oval 5 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 40.98, 64.39);

    UIBezierPath* oval5Path = UIBezierPath.bezierPath;
    [oval5Path moveToPoint: CGPointMake(19.02, 20.61)];
    [oval5Path addCurveToPoint: CGPointMake(19.02, -15.39) controlPoint1: CGPointMake(19.02, 20.61) controlPoint2: CGPointMake(30.94, -8.17)];
    [oval5Path addCurveToPoint: CGPointMake(-19.04, -14.97) controlPoint1: CGPointMake(7.11, -22.62) controlPoint2: CGPointMake(-7.13, -22.2)];
    [oval5Path addCurveToPoint: CGPointMake(-18.98, 20.61) controlPoint1: CGPointMake(-30.95, -7.75) controlPoint2: CGPointMake(-18.98, 20.61)];
    [oval5Path addLineToPoint: CGPointMake(19.02, 20.61)];
    [oval5Path closePath];
    [UIColor.lightGrayColor setStroke];
    oval5Path.lineWidth = 3;
    [oval5Path stroke];

    CGContextRestoreGState(context);


    //// Oval 6 Drawing
    UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(44, 60, 30, 30)];
    [UIColor.darkGrayColor setFill];
    [oval6Path fill];
    [UIColor.whiteColor setStroke];
    oval6Path.lineWidth = 4;
    [oval6Path stroke];


    //// Oval 7 Drawing
    UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(85, 75, 30, 30)];
    [UIColor.whiteColor setStroke];
    oval7Path.lineWidth = 3;
    [oval7Path stroke];
}

+ (void)drawCircleXIcon;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* lightRedColor = [UIColor colorWithRed: 1 green: 0.34 blue: 0.34 alpha: 1];

    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.5, 19.5);
    CGContextScaleCTM(context, 0.8, 0.8);

    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-20, -20, 40, 40)];
    [lightRedColor setFill];
    [oval2Path fill];

    CGContextRestoreGState(context);


    //// Rectangle 7 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.5, 19.5);
    CGContextRotateCTM(context, -45 * M_PI / 180);
    CGContextScaleCTM(context, 0.8, 0.8);

    UIBezierPath* rectangle7Path = [UIBezierPath bezierPathWithRect: CGRectMake(-2.5, -15, 5, 30)];
    [UIColor.whiteColor setFill];
    [rectangle7Path fill];

    CGContextRestoreGState(context);


    //// Rectangle 8 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.5, 19.5);
    CGContextRotateCTM(context, -45 * M_PI / 180);
    CGContextScaleCTM(context, 0.8, 0.8);

    UIBezierPath* rectangle8Path = [UIBezierPath bezierPathWithRect: CGRectMake(-15, -2.5, 30, 5)];
    [UIColor.whiteColor setFill];
    [rectangle8Path fill];

    CGContextRestoreGState(context);
}

+ (void)drawCirclePlusIconWithSelected: (BOOL)selected;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* backgroundColor = selected ? PaintCodeImages.snapollHighlightGreen : PaintCodeImages.snapollGreen;

    //// Oval 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.5, 19.5);
    CGContextScaleCTM(context, 0.8, 0.8);

    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-20.5, -20.5, 40, 40)];
    [backgroundColor setFill];
    [oval3Path fill];

    CGContextRestoreGState(context);


    //// Rectangle 5 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.5, 19.5);
    CGContextScaleCTM(context, 0.8, 0.8);

    UIBezierPath* rectangle5Path = [UIBezierPath bezierPathWithRect: CGRectMake(-2.5, -15, 5, 30)];
    [UIColor.whiteColor setFill];
    [rectangle5Path fill];

    CGContextRestoreGState(context);


    //// Rectangle 6 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.5, 19.5);
    CGContextScaleCTM(context, 0.8, 0.8);

    UIBezierPath* rectangle6Path = [UIBezierPath bezierPathWithRect: CGRectMake(-15, -2.5, 30, 5)];
    [UIColor.whiteColor setFill];
    [rectangle6Path fill];

    CGContextRestoreGState(context);
}

+ (void)drawCircleBackArrowIcon;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval 5 Drawing
    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(4, 4, 52, 52)];
    [UIColor.whiteColor setStroke];
    oval5Path.lineWidth = 2;
    [oval5Path stroke];


    //// Rectangle 11 Drawing
    UIBezierPath* rectangle11Path = [UIBezierPath bezierPathWithRect: CGRectMake(15, 28, 31, 4)];
    [UIColor.whiteColor setFill];
    [rectangle11Path fill];


    //// Rectangle 12 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 17.83, 29.2);
    CGContextRotateCTM(context, 45 * M_PI / 180);

    UIBezierPath* rectangle12Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 18, 4)];
    [UIColor.whiteColor setFill];
    [rectangle12Path fill];

    CGContextRestoreGState(context);


    //// Rectangle 13 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 28);
    CGContextRotateCTM(context, -45 * M_PI / 180);

    UIBezierPath* rectangle13Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 18, 4)];
    [UIColor.whiteColor setFill];
    [rectangle13Path fill];

    CGContextRestoreGState(context);
}

+ (void)drawTrashCan;
{
    //// Color Declarations
    UIColor* lightRedColor = [UIColor colorWithRed: 1 green: 0.34 blue: 0.34 alpha: 1];

    //// Group 8
    {
        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(2.5, 2.5, 56, 56)];
        [lightRedColor setFill];
        [oval4Path fill];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = UIBezierPath.bezierPath;
        [bezier6Path moveToPoint: CGPointMake(20, 21)];
        [bezier6Path addLineToPoint: CGPointMake(23, 47)];
        [bezier6Path addLineToPoint: CGPointMake(38, 47)];
        [bezier6Path addLineToPoint: CGPointMake(41, 21)];
        [bezier6Path addLineToPoint: CGPointMake(20, 21)];
        [bezier6Path closePath];
        [UIColor.whiteColor setStroke];
        bezier6Path.lineWidth = 2;
        [bezier6Path stroke];


        //// Rectangle 9 Drawing
        UIBezierPath* rectangle9Path = UIBezierPath.bezierPath;
        [rectangle9Path moveToPoint: CGPointMake(19, 19)];
        [rectangle9Path addLineToPoint: CGPointMake(42, 19)];
        [rectangle9Path addLineToPoint: CGPointMake(42, 17)];
        [rectangle9Path addLineToPoint: CGPointMake(19, 17)];
        [rectangle9Path addLineToPoint: CGPointMake(19, 19)];
        [rectangle9Path closePath];
        rectangle9Path.lineCapStyle = kCGLineCapRound;

        [UIColor.whiteColor setFill];
        [rectangle9Path fill];


        //// Rectangle 10 Drawing
        UIBezierPath* rectangle10Path = [UIBezierPath bezierPathWithRect: CGRectMake(25, 14, 12, 3.5)];
        [UIColor.whiteColor setStroke];
        rectangle10Path.lineWidth = 2;
        [rectangle10Path stroke];


        //// Bezier 7 Drawing
        UIBezierPath* bezier7Path = UIBezierPath.bezierPath;
        [bezier7Path moveToPoint: CGPointMake(30.5, 25.5)];
        [bezier7Path addLineToPoint: CGPointMake(30.5, 42.5)];
        bezier7Path.lineCapStyle = kCGLineCapRound;

        [UIColor.whiteColor setStroke];
        bezier7Path.lineWidth = 1;
        [bezier7Path stroke];


        //// Bezier 8 Drawing
        UIBezierPath* bezier8Path = UIBezierPath.bezierPath;
        [bezier8Path moveToPoint: CGPointMake(35.5, 25.5)];
        [bezier8Path addLineToPoint: CGPointMake(34.5, 42.5)];
        bezier8Path.lineCapStyle = kCGLineCapRound;

        [UIColor.whiteColor setStroke];
        bezier8Path.lineWidth = 1;
        [bezier8Path stroke];


        //// Bezier 9 Drawing
        UIBezierPath* bezier9Path = UIBezierPath.bezierPath;
        [bezier9Path moveToPoint: CGPointMake(26, 25.5)];
        [bezier9Path addLineToPoint: CGPointMake(27, 42.5)];
        bezier9Path.lineCapStyle = kCGLineCapRound;

        [UIColor.whiteColor setStroke];
        bezier9Path.lineWidth = 1;
        [bezier9Path stroke];
    }
}

+ (void)drawEnvelopeBadges;
{

    //// Envelope Badge
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = UIBezierPath.bezierPath;
        [ovalPath moveToPoint: CGPointMake(22.63, 22.63)];
        [ovalPath addCurveToPoint: CGPointMake(22.63, 6.37) controlPoint1: CGPointMake(27.12, 18.14) controlPoint2: CGPointMake(27.12, 10.86)];
        [ovalPath addCurveToPoint: CGPointMake(6.37, 6.37) controlPoint1: CGPointMake(18.14, 1.88) controlPoint2: CGPointMake(10.86, 1.88)];
        [ovalPath addCurveToPoint: CGPointMake(6.37, 22.63) controlPoint1: CGPointMake(1.88, 10.86) controlPoint2: CGPointMake(1.88, 18.14)];
        [ovalPath addCurveToPoint: CGPointMake(22.63, 22.63) controlPoint1: CGPointMake(10.86, 27.12) controlPoint2: CGPointMake(18.14, 27.12)];
        [ovalPath closePath];
        [PaintCodeImages.snapollGreen setFill];
        [ovalPath fill];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = UIBezierPath.bezierPath;
        [bezier4Path moveToPoint: CGPointMake(7, 19)];
        [bezier4Path addLineToPoint: CGPointMake(22, 19)];
        [bezier4Path addLineToPoint: CGPointMake(22, 9)];
        [bezier4Path addLineToPoint: CGPointMake(7, 9)];
        [bezier4Path addLineToPoint: CGPointMake(7, 19)];
        [bezier4Path closePath];
        [bezier4Path moveToPoint: CGPointMake(7.5, 9.5)];
        [bezier4Path addLineToPoint: CGPointMake(14.5, 14.5)];
        [bezier4Path addLineToPoint: CGPointMake(21.5, 9.5)];
        [UIColor.whiteColor setStroke];
        bezier4Path.lineWidth = 1.5;
        [bezier4Path stroke];
    }
}

+ (void)drawCirclePlus;
{

    //// Group
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(14.5, 7.5)];
        [bezierPath addLineToPoint: CGPointMake(12.5, 7.5)];
        [bezierPath addCurveToPoint: CGPointMake(12.5, 13.5) controlPoint1: CGPointMake(12.5, 7.5) controlPoint2: CGPointMake(12.5, 10.36)];
        [bezierPath addLineToPoint: CGPointMake(6.5, 13.5)];
        [bezierPath addLineToPoint: CGPointMake(6.5, 15.5)];
        [bezierPath addLineToPoint: CGPointMake(12.5, 15.5)];
        [bezierPath addCurveToPoint: CGPointMake(12.5, 21.5) controlPoint1: CGPointMake(12.5, 18.64) controlPoint2: CGPointMake(12.5, 21.5)];
        [bezierPath addLineToPoint: CGPointMake(14.5, 21.5)];
        [bezierPath addCurveToPoint: CGPointMake(14.5, 15.5) controlPoint1: CGPointMake(14.5, 21.5) controlPoint2: CGPointMake(14.5, 18.64)];
        [bezierPath addLineToPoint: CGPointMake(20.5, 15.5)];
        [bezierPath addLineToPoint: CGPointMake(20.5, 13.5)];
        [bezierPath addLineToPoint: CGPointMake(14.5, 13.5)];
        [bezierPath addCurveToPoint: CGPointMake(14.5, 7.5) controlPoint1: CGPointMake(14.5, 10.36) controlPoint2: CGPointMake(14.5, 7.5)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(21.63, 6.37)];
        [bezierPath addCurveToPoint: CGPointMake(21.63, 22.63) controlPoint1: CGPointMake(26.12, 10.86) controlPoint2: CGPointMake(26.12, 18.14)];
        [bezierPath addCurveToPoint: CGPointMake(5.37, 22.63) controlPoint1: CGPointMake(17.14, 27.12) controlPoint2: CGPointMake(9.86, 27.12)];
        [bezierPath addCurveToPoint: CGPointMake(5.37, 6.37) controlPoint1: CGPointMake(0.88, 18.14) controlPoint2: CGPointMake(0.88, 10.86)];
        [bezierPath addCurveToPoint: CGPointMake(21.63, 6.37) controlPoint1: CGPointMake(9.86, 1.88) controlPoint2: CGPointMake(17.14, 1.88)];
        [bezierPath closePath];
        [PaintCodeImages.snapollGreen setFill];
        [bezierPath fill];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = UIBezierPath.bezierPath;
        [bezier5Path moveToPoint: CGPointMake(14.5, 7.5)];
        [bezier5Path addCurveToPoint: CGPointMake(14.5, 13.5) controlPoint1: CGPointMake(14.5, 7.5) controlPoint2: CGPointMake(14.5, 10.36)];
        [bezier5Path addLineToPoint: CGPointMake(20.5, 13.5)];
        [bezier5Path addLineToPoint: CGPointMake(20.5, 15.5)];
        [bezier5Path addLineToPoint: CGPointMake(14.5, 15.5)];
        [bezier5Path addCurveToPoint: CGPointMake(14.5, 21.5) controlPoint1: CGPointMake(14.5, 18.64) controlPoint2: CGPointMake(14.5, 21.5)];
        [bezier5Path addLineToPoint: CGPointMake(12.5, 21.5)];
        [bezier5Path addCurveToPoint: CGPointMake(12.5, 15.5) controlPoint1: CGPointMake(12.5, 21.5) controlPoint2: CGPointMake(12.5, 18.64)];
        [bezier5Path addLineToPoint: CGPointMake(6.5, 15.5)];
        [bezier5Path addLineToPoint: CGPointMake(6.5, 13.5)];
        [bezier5Path addLineToPoint: CGPointMake(12.5, 13.5)];
        [bezier5Path addCurveToPoint: CGPointMake(12.5, 7.5) controlPoint1: CGPointMake(12.5, 10.36) controlPoint2: CGPointMake(12.5, 7.5)];
        [bezier5Path addLineToPoint: CGPointMake(14.5, 7.5)];
        [bezier5Path addLineToPoint: CGPointMake(14.5, 7.5)];
        [bezier5Path closePath];
        [UIColor.whiteColor setFill];
        [bezier5Path fill];
    }
}

+ (void)drawCircleXBadge;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* lightRedColor = [UIColor colorWithRed: 1 green: 0.34 blue: 0.34 alpha: 1];

    //// Group 2
    {
        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
        [bezier3Path moveToPoint: CGPointMake(11.16, 9.84)];
        [bezier3Path addLineToPoint: CGPointMake(9.74, 11.26)];
        [bezier3Path addCurveToPoint: CGPointMake(13.99, 15.5) controlPoint1: CGPointMake(9.74, 11.26) controlPoint2: CGPointMake(11.77, 13.28)];
        [bezier3Path addLineToPoint: CGPointMake(9.74, 19.74)];
        [bezier3Path addLineToPoint: CGPointMake(11.16, 21.16)];
        [bezier3Path addLineToPoint: CGPointMake(15.4, 16.91)];
        [bezier3Path addCurveToPoint: CGPointMake(19.64, 21.16) controlPoint1: CGPointMake(17.62, 19.13) controlPoint2: CGPointMake(19.64, 21.16)];
        [bezier3Path addLineToPoint: CGPointMake(21.06, 19.74)];
        [bezier3Path addCurveToPoint: CGPointMake(16.81, 15.5) controlPoint1: CGPointMake(21.06, 19.74) controlPoint2: CGPointMake(19.03, 17.72)];
        [bezier3Path addLineToPoint: CGPointMake(21.06, 11.26)];
        [bezier3Path addLineToPoint: CGPointMake(19.64, 9.84)];
        [bezier3Path addLineToPoint: CGPointMake(15.4, 14.09)];
        [bezier3Path addCurveToPoint: CGPointMake(11.16, 9.84) controlPoint1: CGPointMake(13.18, 11.87) controlPoint2: CGPointMake(11.16, 9.84)];
        [bezier3Path addLineToPoint: CGPointMake(11.16, 9.84)];
        [bezier3Path closePath];
        [bezier3Path moveToPoint: CGPointMake(23.63, 7.37)];
        [bezier3Path addCurveToPoint: CGPointMake(23.63, 23.63) controlPoint1: CGPointMake(28.12, 11.86) controlPoint2: CGPointMake(28.12, 19.14)];
        [bezier3Path addCurveToPoint: CGPointMake(7.37, 23.63) controlPoint1: CGPointMake(19.14, 28.12) controlPoint2: CGPointMake(11.86, 28.12)];
        [bezier3Path addCurveToPoint: CGPointMake(7.37, 7.37) controlPoint1: CGPointMake(2.88, 19.14) controlPoint2: CGPointMake(2.88, 11.86)];
        [bezier3Path addCurveToPoint: CGPointMake(23.63, 7.37) controlPoint1: CGPointMake(11.86, 2.88) controlPoint2: CGPointMake(19.14, 2.88)];
        [bezier3Path closePath];
        [lightRedColor setFill];
        [bezier3Path fill];


        //// Bezier 2 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 5.5, 15.5);
        CGContextRotateCTM(context, -45 * M_PI / 180);

        UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
        [bezier2Path moveToPoint: CGPointMake(8, 0)];
        [bezier2Path addCurveToPoint: CGPointMake(8, 6) controlPoint1: CGPointMake(8, -0) controlPoint2: CGPointMake(8, 2.86)];
        [bezier2Path addLineToPoint: CGPointMake(14, 6)];
        [bezier2Path addLineToPoint: CGPointMake(14, 8)];
        [bezier2Path addLineToPoint: CGPointMake(8, 8)];
        [bezier2Path addCurveToPoint: CGPointMake(8, 14) controlPoint1: CGPointMake(8, 11.14) controlPoint2: CGPointMake(8, 14)];
        [bezier2Path addLineToPoint: CGPointMake(6, 14)];
        [bezier2Path addCurveToPoint: CGPointMake(6, 8) controlPoint1: CGPointMake(6, 14) controlPoint2: CGPointMake(6, 11.14)];
        [bezier2Path addLineToPoint: CGPointMake(0, 8)];
        [bezier2Path addLineToPoint: CGPointMake(0, 6)];
        [bezier2Path addLineToPoint: CGPointMake(6, 6)];
        [bezier2Path addCurveToPoint: CGPointMake(6, -0) controlPoint1: CGPointMake(6, 2.86) controlPoint2: CGPointMake(6, -0)];
        [bezier2Path addLineToPoint: CGPointMake(8, -0)];
        [bezier2Path addLineToPoint: CGPointMake(8, 0)];
        [bezier2Path closePath];
        [UIColor.whiteColor setFill];
        [bezier2Path fill];

        CGContextRestoreGState(context);
    }
}

+ (void)drawSemiCircleSlideIndicatorIcon;
{

    //// Bezier 10 Drawing
    UIBezierPath* bezier10Path = UIBezierPath.bezierPath;
    [bezier10Path moveToPoint: CGPointMake(23.9, 10.1)];
    [bezier10Path addCurveToPoint: CGPointMake(28, 20) controlPoint1: CGPointMake(26.63, 12.83) controlPoint2: CGPointMake(28, 16.42)];
    [bezier10Path addLineToPoint: CGPointMake(25, 20)];
    [bezier10Path addCurveToPoint: CGPointMake(21.78, 12.22) controlPoint1: CGPointMake(25, 17.18) controlPoint2: CGPointMake(23.93, 14.37)];
    [bezier10Path addCurveToPoint: CGPointMake(6.22, 12.22) controlPoint1: CGPointMake(17.48, 7.93) controlPoint2: CGPointMake(10.52, 7.93)];
    [bezier10Path addCurveToPoint: CGPointMake(3, 20) controlPoint1: CGPointMake(4.07, 14.37) controlPoint2: CGPointMake(3, 17.18)];
    [bezier10Path addLineToPoint: CGPointMake(0, 20)];
    [bezier10Path addCurveToPoint: CGPointMake(4.1, 10.1) controlPoint1: CGPointMake(0, 16.42) controlPoint2: CGPointMake(1.37, 12.83)];
    [bezier10Path addCurveToPoint: CGPointMake(23.9, 10.1) controlPoint1: CGPointMake(9.57, 4.63) controlPoint2: CGPointMake(18.43, 4.63)];
    [bezier10Path closePath];
    [UIColor.lightGrayColor setFill];
    [bezier10Path fill];
}

+ (void)drawHorizontalHollowSlideIndicator;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.16];

    //// Rectangle 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 46, 12);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(-6, -25, 12, 50) cornerRadius: 6];
    [color3 setStroke];
    rectangle3Path.lineWidth = 2;
    [rectangle3Path stroke];

    CGContextRestoreGState(context);
}

+ (void)drawHorizontalSlideIndicator;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color4 = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.163];

    //// Rectangle 4 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 46, 11);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(-6, -25, 12, 50) cornerRadius: 6];
    [color4 setFill];
    [rectangle4Path fill];

    CGContextRestoreGState(context);
}

+ (void)drawVerticalHollowSlideIndicator;
{
    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.16];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(11, 6, 12, 50) cornerRadius: 6];
    [color3 setStroke];
    rectanglePath.lineWidth = 2;
    [rectanglePath stroke];
}

+ (void)drawVerticalSolidSlideIndicator;
{
    //// Color Declarations
    UIColor* color4 = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.163];

    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(10, 6, 12, 50) cornerRadius: 6];
    [color4 setFill];
    [rectangle2Path fill];
}

+ (void)drawCircleLeftBackArrow;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval 5 Drawing
    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(3, 2, 25, 25)];
    [UIColor.whiteColor setStroke];
    oval5Path.lineWidth = 1;
    [oval5Path stroke];


    //// Rectangle 11 Drawing
    UIBezierPath* rectangle11Path = [UIBezierPath bezierPathWithRect: CGRectMake(8, 13, 15, 2)];
    [UIColor.whiteColor setFill];
    [rectangle11Path fill];


    //// Rectangle 12 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 9.41, 13.6);
    CGContextRotateCTM(context, 45 * M_PI / 180);

    UIBezierPath* rectangle12Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 9, 2)];
    [UIColor.whiteColor setFill];
    [rectangle12Path fill];

    CGContextRestoreGState(context);


    //// Rectangle 13 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 8, 13);
    CGContextRotateCTM(context, -45 * M_PI / 180);

    UIBezierPath* rectangle13Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 9, 2)];
    [UIColor.whiteColor setFill];
    [rectangle13Path fill];

    CGContextRestoreGState(context);
}

+ (void)drawEmailSymbol;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 0.5 green: 0.5 blue: 0.5 alpha: 1];

    //// Shadow Declarations
    UIColor* shadow2 = [UIColor.blackColor colorWithAlphaComponent: 0.23];
    CGSize shadow2Offset = CGSizeMake(0.1, 1.1);
    CGFloat shadow2BlurRadius = 5;

    //// Oval Drawing
    CGRect ovalRect = CGRectMake(5, 5, 20, 20);
    {
        NSString* textContent = @"@";
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, shadow2Offset, shadow2BlurRadius, [shadow2 CGColor]);
        UIFont* ovalFont = [UIFont fontWithName: @"GurmukhiMN-Bold" size: UIFont.labelFontSize];
        [color2 setFill];
        [textContent drawInRect: CGRectOffset(ovalRect, 0, (CGRectGetHeight(ovalRect) - [textContent sizeWithFont: ovalFont constrainedToSize: ovalRect.size lineBreakMode: UILineBreakModeWordWrap].height) / 2) withFont: ovalFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
        CGContextRestoreGState(context);

    }
}

+ (void)drawFacebookSymbol;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 0.5 green: 0.5 blue: 0.5 alpha: 1];

    //// Shadow Declarations
    UIColor* shadow2 = [UIColor.blackColor colorWithAlphaComponent: 0.23];
    CGSize shadow2Offset = CGSizeMake(0.1, 1.1);
    CGFloat shadow2BlurRadius = 5;

    //// Oval Drawing
    CGRect ovalRect = CGRectMake(5, 5, 20, 20);
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadow2Offset, shadow2BlurRadius, [shadow2 CGColor]);
    [color2 setFill];
    [@"f" drawInRect: ovalRect withFont: [UIFont fontWithName: @"GurmukhiMN-Bold" size: UIFont.labelFontSize] lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    CGContextRestoreGState(context);
}

+ (void)drawTwitterSymbol;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 0.5 green: 0.5 blue: 0.5 alpha: 1];

    //// Shadow Declarations
    UIColor* shadow2 = [UIColor.blackColor colorWithAlphaComponent: 0.23];
    CGSize shadow2Offset = CGSizeMake(0.1, 1.1);
    CGFloat shadow2BlurRadius = 5;

    //// Oval Drawing
    CGRect ovalRect = CGRectMake(5, 5, 20, 20);
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadow2Offset, shadow2BlurRadius, [shadow2 CGColor]);
    [color2 setFill];
    [@"t" drawInRect: ovalRect withFont: [UIFont fontWithName: @"GurmukhiMN-Bold" size: UIFont.labelFontSize] lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    CGContextRestoreGState(context);
}

+ (void)drawLoginBackground;
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Gradient Declarations
    CGFloat gradientLocations[] = {0, 0.29, 1};
    CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)PaintCodeImages.snapollHighlightGreen.CGColor, (id)[UIColor colorWithRed: 0.4 green: 1 blue: 0.752 alpha: 1].CGColor, (id)PaintCodeImages.snapollGreen.CGColor], gradientLocations);

    //// Shadow Declarations
    UIColor* shadow4 = UIColor.blackColor;
    CGSize shadow4Offset = CGSizeMake(3.1, 3.1);
    CGFloat shadow4BlurRadius = 5;

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 640, 1136)];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadow4Offset, shadow4BlurRadius, [shadow4 CGColor]);
    CGContextBeginTransparencyLayer(context, NULL);
    [rectanglePath addClip];
    CGContextDrawRadialGradient(context, gradient,
        CGPointMake(315.74, 402.04), 214.42,
        CGPointMake(319.51, 414.88), 699.64,
        kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);



    //// Cleanup
    CGGradientRelease(gradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawBBPlaceholderAvatar;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 16, 16);

    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-14, -14, 28, 28)];
    [UIColor.lightGrayColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];

    CGContextRestoreGState(context);


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 16, 10);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-5, -5, 10, 10)];
    [UIColor.lightGrayColor setFill];
    [ovalPath fill];

    CGContextRestoreGState(context);


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(21.3, 17.76)];
    [bezier2Path addCurveToPoint: CGPointMake(23.5, 22) controlPoint1: CGPointMake(22.77, 18.93) controlPoint2: CGPointMake(23.5, 20.46)];
    [bezier2Path addLineToPoint: CGPointMake(23.5, 26)];
    [bezier2Path addLineToPoint: CGPointMake(21.59, 26)];
    [bezier2Path addLineToPoint: CGPointMake(10.41, 26)];
    [bezier2Path addLineToPoint: CGPointMake(8.5, 26)];
    [bezier2Path addLineToPoint: CGPointMake(8.5, 22)];
    [bezier2Path addCurveToPoint: CGPointMake(10.7, 17.76) controlPoint1: CGPointMake(8.5, 20.46) controlPoint2: CGPointMake(9.23, 18.93)];
    [bezier2Path addCurveToPoint: CGPointMake(21.3, 17.76) controlPoint1: CGPointMake(13.63, 15.41) controlPoint2: CGPointMake(18.37, 15.41)];
    [bezier2Path closePath];
    [UIColor.lightGrayColor setFill];
    [bezier2Path fill];
}

+ (void)drawCanvas2;
{
}

+ (void)drawCirclePlusIconSelected;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.5, 19.5);
    CGContextScaleCTM(context, 0.8, 0.8);

    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-20.5, -20.5, 40, 40)];
    [PaintCodeImages.snapollSelectedGreen setFill];
    [oval3Path fill];

    CGContextRestoreGState(context);


    //// Rectangle 5 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.5, 19.5);
    CGContextScaleCTM(context, 0.8, 0.8);

    UIBezierPath* rectangle5Path = [UIBezierPath bezierPathWithRect: CGRectMake(-2.5, -15, 5, 30)];
    [UIColor.whiteColor setFill];
    [rectangle5Path fill];

    CGContextRestoreGState(context);


    //// Rectangle 6 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.5, 19.5);
    CGContextScaleCTM(context, 0.8, 0.8);

    UIBezierPath* rectangle6Path = [UIBezierPath bezierPathWithRect: CGRectMake(-15, -2.5, 30, 5)];
    [UIColor.whiteColor setFill];
    [rectangle6Path fill];

    CGContextRestoreGState(context);
}

+ (void)drawCirclePlusIconHighlighted;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.5, 19.5);
    CGContextScaleCTM(context, 0.8, 0.8);

    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-20.5, -20.5, 40, 40)];
    [PaintCodeImages.snapollHighlightGreen setFill];
    [oval3Path fill];

    CGContextRestoreGState(context);


    //// Rectangle 5 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.5, 19.5);
    CGContextScaleCTM(context, 0.8, 0.8);

    UIBezierPath* rectangle5Path = [UIBezierPath bezierPathWithRect: CGRectMake(-2.5, -15, 5, 30)];
    [UIColor.whiteColor setFill];
    [rectangle5Path fill];

    CGContextRestoreGState(context);


    //// Rectangle 6 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.5, 19.5);
    CGContextScaleCTM(context, 0.8, 0.8);

    UIBezierPath* rectangle6Path = [UIBezierPath bezierPathWithRect: CGRectMake(-15, -2.5, 30, 5)];
    [UIColor.whiteColor setFill];
    [rectangle6Path fill];

    CGContextRestoreGState(context);
}

+ (void)drawSegmentedLoginWithSelectedSegment: (CGFloat)selectedSegment;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* segmentIndex0 = selectedSegment == 0 ? PaintCodeImages.loginSelectedBlue : PaintCodeImages.loginNormalBlue;
    UIColor* segmentIndex1 = selectedSegment == 1 ? PaintCodeImages.loginSelectedBlue : PaintCodeImages.loginNormalBlue;
    UIColor* segmentIndex2 = selectedSegment == 2 ? PaintCodeImages.loginSelectedBlue : PaintCodeImages.loginNormalBlue;

    //// Oval 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 24.6, 19.6);
    CGContextScaleCTM(context, 0.8, 0.8);

    CGRect oval3Rect = CGRectMake(-20, -20, 40, 40);
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: oval3Rect];
    [segmentIndex0 setFill];
    [oval3Path fill];
    {
        NSString* textContent = @"f";
        UIFont* oval3Font = [UIFont fontWithName: @"Thonburi-Bold" size: 30];
        [UIColor.whiteColor setFill];
        [textContent drawInRect: CGRectOffset(oval3Rect, 0, (CGRectGetHeight(oval3Rect) - [textContent sizeWithFont: oval3Font constrainedToSize: oval3Rect.size lineBreakMode: UILineBreakModeWordWrap].height) / 2) withFont: oval3Font lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    }

    CGContextRestoreGState(context);


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 65, 20);
    CGContextScaleCTM(context, 0.8, 0.8);

    CGRect ovalRect = CGRectMake(-20.5, -20.5, 40, 40);
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: ovalRect];
    [segmentIndex1 setFill];
    [ovalPath fill];
    {
        NSString* textContent = @"t";
        UIFont* ovalFont = [UIFont fontWithName: @"Thonburi-Bold" size: 30];
        [UIColor.whiteColor setFill];
        [textContent drawInRect: CGRectOffset(ovalRect, 0, (CGRectGetHeight(ovalRect) - [textContent sizeWithFont: ovalFont constrainedToSize: ovalRect.size lineBreakMode: UILineBreakModeWordWrap].height) / 2) withFont: ovalFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    }

    CGContextRestoreGState(context);


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 105, 20);
    CGContextScaleCTM(context, 0.8, 0.8);

    CGRect oval2Rect = CGRectMake(-20.5, -20.5, 40, 40);
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: oval2Rect];
    [segmentIndex2 setFill];
    [oval2Path fill];
    {
        NSString* textContent = @"@";
        UIFont* oval2Font = [UIFont fontWithName: @"Thonburi-Bold" size: 30];
        [UIColor.whiteColor setFill];
        [textContent drawInRect: CGRectOffset(oval2Rect, 0, (CGRectGetHeight(oval2Rect) - [textContent sizeWithFont: oval2Font constrainedToSize: oval2Rect.size lineBreakMode: UILineBreakModeWordWrap].height) / 2) withFont: oval2Font lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    }

    CGContextRestoreGState(context);
}

+ (void)drawFacebookLoginWithSelected: (BOOL)selected;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* expSelected = selected ? PaintCodeImages.loginSelectedBlue : PaintCodeImages.loginNormalBlue;

    //// Oval 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 25, 25);
    CGContextScaleCTM(context, 0.8, 0.8);

    CGRect oval3Rect = CGRectMake(-30, -30, 60, 60);
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: oval3Rect];
    [expSelected setFill];
    [oval3Path fill];
    {
        NSString* textContent = @"f";
        UIFont* oval3Font = [UIFont fontWithName: @"Thonburi-Bold" size: 40];
        [UIColor.whiteColor setFill];
        [textContent drawInRect: CGRectOffset(oval3Rect, 0, (CGRectGetHeight(oval3Rect) - [textContent sizeWithFont: oval3Font constrainedToSize: oval3Rect.size lineBreakMode: UILineBreakModeWordWrap].height) / 2) withFont: oval3Font lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    }

    CGContextRestoreGState(context);


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 25, 25);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-23, -23, 46, 46)];
    [PaintCodeImages.loginSelectedBlue setStroke];
    ovalPath.lineWidth = 2;
    [ovalPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawTwitterLoginWithSelected: (BOOL)selected;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* expSelected = selected ? PaintCodeImages.loginSelectedBlue : PaintCodeImages.loginNormalBlue;

    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 25, 25);
    CGContextScaleCTM(context, 0.8, 0.8);

    CGRect ovalRect = CGRectMake(-30, -30, 60, 60);
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: ovalRect];
    [expSelected setFill];
    [ovalPath fill];
    {
        NSString* textContent = @"t";
        UIFont* ovalFont = [UIFont fontWithName: @"Thonburi-Bold" size: 40];
        [UIColor.whiteColor setFill];
        [textContent drawInRect: CGRectOffset(ovalRect, 0, (CGRectGetHeight(ovalRect) - [textContent sizeWithFont: ovalFont constrainedToSize: ovalRect.size lineBreakMode: UILineBreakModeWordWrap].height) / 2) withFont: ovalFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    }

    CGContextRestoreGState(context);


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 25, 25);

    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-23, -23, 46, 46)];
    [PaintCodeImages.loginSelectedBlue setStroke];
    oval2Path.lineWidth = 2;
    [oval2Path stroke];

    CGContextRestoreGState(context);
}

+ (void)drawEmailLoginWithSelected: (BOOL)selected;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    UIColor* expSelected = selected ? PaintCodeImages.loginSelectedBlue : PaintCodeImages.loginNormalBlue;

    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 25, 25);
    CGContextScaleCTM(context, 0.8, 0.8);

    CGRect oval2Rect = CGRectMake(-30, -30, 60, 60);
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: oval2Rect];
    [expSelected setFill];
    [oval2Path fill];
    {
        NSString* textContent = @"@";
        UIFont* oval2Font = [UIFont fontWithName: @"Thonburi-Bold" size: 40];
        [UIColor.whiteColor setFill];
        [textContent drawInRect: CGRectOffset(oval2Rect, 0, (CGRectGetHeight(oval2Rect) - [textContent sizeWithFont: oval2Font constrainedToSize: oval2Rect.size lineBreakMode: UILineBreakModeWordWrap].height) / 2) withFont: oval2Font lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    }

    CGContextRestoreGState(context);


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 25, 25);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-23, -23, 46, 46)];
    [PaintCodeImages.loginSelectedBlue setStroke];
    ovalPath.lineWidth = 2;
    [ovalPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawLoginLockWithLockRotation: (CGFloat)lockRotation;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 0.5 green: 0.5 blue: 0.5 alpha: 1];

    //// Oval Drawing
    UIBezierPath* ovalPath = UIBezierPath.bezierPath;
    [ovalPath moveToPoint: CGPointMake(41.26, 41.26)];
    [ovalPath addCurveToPoint: CGPointMake(41.26, 8.74) controlPoint1: CGPointMake(50.25, 32.28) controlPoint2: CGPointMake(50.25, 17.72)];
    [ovalPath addCurveToPoint: CGPointMake(8.74, 8.74) controlPoint1: CGPointMake(32.28, -0.25) controlPoint2: CGPointMake(17.72, -0.25)];
    [ovalPath addCurveToPoint: CGPointMake(8.74, 41.26) controlPoint1: CGPointMake(-0.25, 17.72) controlPoint2: CGPointMake(-0.25, 32.28)];
    [ovalPath addCurveToPoint: CGPointMake(41.26, 41.26) controlPoint1: CGPointMake(17.72, 50.25) controlPoint2: CGPointMake(32.28, 50.25)];
    [ovalPath closePath];
    [UIColor.lightGrayColor setStroke];
    ovalPath.lineWidth = 2;
    [ovalPath stroke];


    //// Oval 5 Drawing
    UIBezierPath* oval5Path = UIBezierPath.bezierPath;
    [oval5Path moveToPoint: CGPointMake(33, 14.2)];
    [oval5Path addCurveToPoint: CGPointMake(31.15, 11.05) controlPoint1: CGPointMake(32.57, 13.06) controlPoint2: CGPointMake(31.95, 11.98)];
    [oval5Path addCurveToPoint: CGPointMake(18.54, 11.05) controlPoint1: CGPointMake(27.67, 6.98) controlPoint2: CGPointMake(22.02, 6.98)];
    [oval5Path addCurveToPoint: CGPointMake(16.76, 22.8) controlPoint1: CGPointMake(15.82, 14.23) controlPoint2: CGPointMake(16.76, 22.8)];
    [UIColor.lightGrayColor setStroke];
    oval5Path.lineWidth = 3;
    [oval5Path stroke];


    //// Oval 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 25, 31);

    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-12.5, -12.5, 25, 25)];
    [UIColor.lightGrayColor setFill];
    [oval3Path fill];
    [UIColor.grayColor setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];

    CGContextRestoreGState(context);


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 25, 31);

    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-3, -3, 6, 6)];
    [color2 setFill];
    [oval2Path fill];

    CGContextRestoreGState(context);


    //// Oval 4 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 25, 31);
    CGContextRotateCTM(context, -lockRotation * M_PI / 180);

    UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-9, -9, 18, 18)];
    [UIColor.whiteColor setStroke];
    oval4Path.lineWidth = 4;
    CGFloat oval4Pattern[] = {2, 5};
    [oval4Path setLineDash: oval4Pattern count: 2 phase: 0];
    [oval4Path stroke];

    CGContextRestoreGState(context);
}

+ (void)drawLoginSliderWithSelected: (BOOL)selected;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Variable Declarations
    CGFloat exLoginSlider = selected ? 80 : 5;
    NSString* exLoginSliderText = selected ? @"New User" : @"Welcome";

    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 18, 85.5);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    CGRect rectangleRect = CGRectMake(-75, -15, 150, 30);
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 6];
    [PaintCodeImages.loginNormalBlue setFill];
    [rectanglePath fill];
    [UIColor.blueColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];
    {
        NSString* textContent = @"    Welcome      New User";
        UIFont* rectangleFont = [UIFont fontWithName: @"Helvetica" size: 12];
        [UIColor.whiteColor setFill];
        [textContent drawInRect: CGRectOffset(rectangleRect, 0, (CGRectGetHeight(rectangleRect) - [textContent sizeWithFont: rectangleFont constrainedToSize: rectangleRect.size lineBreakMode: UILineBreakModeWordWrap].height) / 2) withFont: rectangleFont lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentLeft];
    }

    CGContextRestoreGState(context);


    //// Rectangle 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, (exLoginSlider + 13), 85.5);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    CGRect rectangle3Rect = CGRectMake(-75, -14.5, 75, 29);
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRoundedRect: rectangle3Rect cornerRadius: 6];
    [PaintCodeImages.loginSelectedBlue setFill];
    [rectangle3Path fill];
    [PaintCodeImages.loginSelectedBlue setStroke];
    rectangle3Path.lineWidth = 1;
    [rectangle3Path stroke];
    UIFont* rectangle3Font = [UIFont fontWithName: @"Helvetica" size: 12];
    [UIColor.whiteColor setFill];
    [exLoginSliderText drawInRect: CGRectOffset(rectangle3Rect, 0, (CGRectGetHeight(rectangle3Rect) - [exLoginSliderText sizeWithFont: rectangle3Font constrainedToSize: rectangle3Rect.size lineBreakMode: UILineBreakModeWordWrap].height) / 2) withFont: rectangle3Font lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];

    CGContextRestoreGState(context);
}

+ (void)drawProfileBackground;
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* gradient2Color = [UIColor colorWithRed: 0.631 green: 0.63 blue: 0.63 alpha: 0.83];

    //// Gradient Declarations
    CGFloat gradient2Locations[] = {0, 1};
    CGGradientRef gradient2 = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)gradient2Color.CGColor, (id)UIColor.whiteColor.CGColor], gradient2Locations);

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 220, 230)];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawRadialGradient(context, gradient2,
        CGPointMake(110, 115), 3.74,
        CGPointMake(110, 115), 124.89,
        kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    CGContextRestoreGState(context);


    //// Cleanup
    CGGradientRelease(gradient2);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawEventIcon;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 16);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(-10, -10, 20, 20) cornerRadius: 2];
    [UIColor.blackColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];

    CGContextRestoreGState(context);


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 6.5, 3.5);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.5, 0, 2.5, 4)];
    [UIColor.blackColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];

    CGContextRestoreGState(context);


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10.5, 3.5);

    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.5, 0, 2.5, 4)];
    [UIColor.blackColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];

    CGContextRestoreGState(context);


    //// Oval 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 14.5, 3.5);

    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.5, 0, 2.5, 4)];
    [UIColor.blackColor setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];

    CGContextRestoreGState(context);


    //// Oval 4 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 18.5, 3.5);

    UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.5, 0, 2.5, 4)];
    [UIColor.blackColor setStroke];
    oval4Path.lineWidth = 1;
    [oval4Path stroke];

    CGContextRestoreGState(context);


    //// Rectangle 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 12);

    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(-7, -0.5, 14, 1)];
    [UIColor.blackColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];

    CGContextRestoreGState(context);


    //// Rectangle 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 16);

    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(-7, -0.5, 14, 1)];
    [UIColor.blackColor setStroke];
    rectangle3Path.lineWidth = 1;
    [rectangle3Path stroke];

    CGContextRestoreGState(context);


    //// Rectangle 4 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 20);

    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake(-7, -0.5, 14, 1)];
    [UIColor.blackColor setStroke];
    rectangle4Path.lineWidth = 1;
    [rectangle4Path stroke];

    CGContextRestoreGState(context);


    //// Rectangle 5 Drawing
    UIBezierPath* rectangle5Path = [UIBezierPath bezierPathWithRect: CGRectMake(11.5, 9.5, 1, 14)];
    [UIColor.blackColor setStroke];
    rectangle5Path.lineWidth = 1;
    [rectangle5Path stroke];


    //// Rectangle 6 Drawing
    UIBezierPath* rectangle6Path = [UIBezierPath bezierPathWithRect: CGRectMake(17.5, 9.5, 1, 14)];
    [UIColor.blackColor setStroke];
    rectangle6Path.lineWidth = 1;
    [rectangle6Path stroke];
}

+ (void)drawPollIcon;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 8.5, 23.5);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(-3, -3, 6, 6) cornerRadius: 1];
    [UIColor.blackColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];

    CGContextRestoreGState(context);


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(5.5, 12.5, 6, 6)];
    [UIColor.blackColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 8.5, 7.5);

    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-3, -3, 6, 6)];
    [UIColor.blackColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];

    CGContextRestoreGState(context);


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(14.5, 6.5, 11, 1)];
    [UIColor.blackColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(14.5, 14.5, 11, 1)];
    [UIColor.blackColor setStroke];
    rectangle3Path.lineWidth = 1;
    [rectangle3Path stroke];


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake(14.5, 22.5, 11, 1)];
    [UIColor.blackColor setStroke];
    rectangle4Path.lineWidth = 1;
    [rectangle4Path stroke];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(6.5, 21.5)];
    [bezierPath addCurveToPoint: CGPointMake(8.5, 24.5) controlPoint1: CGPointMake(8.5, 24.5) controlPoint2: CGPointMake(8.5, 24.5)];
    [bezierPath addLineToPoint: CGPointMake(13.5, 18.5)];
    [UIColor.blackColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Oval 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 8.5, 7.5);

    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-1.75, -1.75, 3.5, 3.5)];
    [UIColor.blackColor setFill];
    [oval3Path fill];

    CGContextRestoreGState(context);
}

+ (void)drawAddIcon;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 12.5, 12.5);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(-1.5, -11.5, 3, 23)];
    [UIColor.grayColor setFill];
    [rectanglePath fill];

    CGContextRestoreGState(context);


    //// Rectangle 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 12.5, 12.5);

    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(-11.5, -1.5, 23, 3)];
    [UIColor.grayColor setFill];
    [rectangle2Path fill];

    CGContextRestoreGState(context);
}

+ (void)drawMinusIcon;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 15);

    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(-11.5, -1.5, 23, 3)];
    [UIColor.grayColor setFill];
    [rectangle2Path fill];

    CGContextRestoreGState(context);
}

+ (void)drawCircleRightBackArrow;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval 5 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15.5, 14.5);
    CGContextRotateCTM(context, -180 * M_PI / 180);

    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-12.5, -12.5, 25, 25)];
    [UIColor.whiteColor setStroke];
    oval5Path.lineWidth = 1;
    [oval5Path stroke];

    CGContextRestoreGState(context);


    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 15.5, 14.01);
        CGContextRotateCTM(context, -180 * M_PI / 180);



        //// Rectangle 11 Drawing
        UIBezierPath* rectangle11Path = [UIBezierPath bezierPathWithRect: CGRectMake(-7.5, -1.01, 15, 2)];
        [UIColor.whiteColor setFill];
        [rectangle11Path fill];


        //// Rectangle 12 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -6.09, -0.41);
        CGContextRotateCTM(context, 45 * M_PI / 180);

        UIBezierPath* rectangle12Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 9, 2)];
        [UIColor.whiteColor setFill];
        [rectangle12Path fill];

        CGContextRestoreGState(context);


        //// Rectangle 13 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -7.5, -1.01);
        CGContextRotateCTM(context, -45 * M_PI / 180);

        UIBezierPath* rectangle13Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 9, 2)];
        [UIColor.whiteColor setFill];
        [rectangle13Path fill];

        CGContextRestoreGState(context);



        CGContextRestoreGState(context);
    }
}

+ (void)drawEdit;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval 5 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 15);

    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-12.5, -12.5, 25, 25)];
    [UIColor.whiteColor setStroke];
    oval5Path.lineWidth = 1;
    [oval5Path stroke];

    CGContextRestoreGState(context);


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(11.97, 8.03)];
    [bezierPath addCurveToPoint: CGPointMake(11.97, 12.97) controlPoint1: CGPointMake(13.34, 9.39) controlPoint2: CGPointMake(13.34, 11.61)];
    [bezierPath addCurveToPoint: CGPointMake(7.03, 12.97) controlPoint1: CGPointMake(10.61, 14.34) controlPoint2: CGPointMake(8.39, 14.34)];
    [bezierPath addCurveToPoint: CGPointMake(6.03, 10.03) controlPoint1: CGPointMake(6.22, 12.17) controlPoint2: CGPointMake(5.89, 11.08)];
    [bezierPath addCurveToPoint: CGPointMake(6.77, 11.48) controlPoint1: CGPointMake(6.11, 10.56) controlPoint2: CGPointMake(6.36, 11.07)];
    [bezierPath addCurveToPoint: CGPointMake(10.48, 11.48) controlPoint1: CGPointMake(7.79, 12.51) controlPoint2: CGPointMake(9.46, 12.51)];
    [bezierPath addCurveToPoint: CGPointMake(10.48, 7.77) controlPoint1: CGPointMake(11.51, 10.46) controlPoint2: CGPointMake(11.51, 8.79)];
    [bezierPath addCurveToPoint: CGPointMake(9.03, 7.03) controlPoint1: CGPointMake(10.07, 7.36) controlPoint2: CGPointMake(9.56, 7.11)];
    [bezierPath addCurveToPoint: CGPointMake(11.97, 8.03) controlPoint1: CGPointMake(10.08, 6.89) controlPoint2: CGPointMake(11.17, 7.22)];
    [bezierPath closePath];
    [UIColor.whiteColor setFill];
    [bezierPath fill];


    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 14.51, 15.51);
    CGContextRotateCTM(context, 45 * M_PI / 180);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(-4.96, -1.25, 9.92, 2.5)];
    [UIColor.whiteColor setFill];
    [rectanglePath fill];

    CGContextRestoreGState(context);


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(17, 18, 5.5, 5.5)];
    [UIColor.whiteColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];
}

+ (void)drawClock;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval 5 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 15);

    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-12.5, -12.5, 25, 25)];
    [UIColor.whiteColor setStroke];
    oval5Path.lineWidth = 1;
    [oval5Path stroke];

    CGContextRestoreGState(context);


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(14.5, 6.5)];
    [bezierPath addCurveToPoint: CGPointMake(14.5, 17.5) controlPoint1: CGPointMake(14.5, 15.5) controlPoint2: CGPointMake(14.5, 17.5)];
    [bezierPath addLineToPoint: CGPointMake(20.5, 13.5)];
    [UIColor.whiteColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];
}

+ (void)drawLocationPin;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval 5 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 15);

    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-12.5, -12.5, 25, 25)];
    [UIColor.whiteColor setStroke];
    oval5Path.lineWidth = 1;
    [oval5Path stroke];

    CGContextRestoreGState(context);


    //// Oval Drawing
    UIBezierPath* ovalPath = UIBezierPath.bezierPath;
    [ovalPath moveToPoint: CGPointMake(20.5, 10.63)];
    [ovalPath addCurveToPoint: CGPointMake(18.89, 6.96) controlPoint1: CGPointMake(20.53, 9.31) controlPoint2: CGPointMake(20, 7.97)];
    [ovalPath addCurveToPoint: CGPointMake(11.11, 6.96) controlPoint1: CGPointMake(16.74, 5.01) controlPoint2: CGPointMake(13.26, 5.01)];
    [ovalPath addCurveToPoint: CGPointMake(9.51, 10.77) controlPoint1: CGPointMake(9.96, 8.01) controlPoint2: CGPointMake(9.43, 9.4)];
    [UIColor.whiteColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(9.5, 10.5)];
    [bezierPath addLineToPoint: CGPointMake(15, 23.5)];
    [bezierPath addLineToPoint: CGPointMake(20.5, 10.5)];
    [UIColor.whiteColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(12.5, 8.5, 5, 5)];
    [UIColor.whiteColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(14.5, 10.5, 1, 1)];
    [UIColor.whiteColor setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];
}

+ (void)drawPerson;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval 5 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 15);

    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-12.5, -12.5, 25, 25)];
    [UIColor.whiteColor setStroke];
    oval5Path.lineWidth = 1;
    [oval5Path stroke];

    CGContextRestoreGState(context);


    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 10.5);
    CGContextScaleCTM(context, 0.7, 0.8);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-5, -4.38, 10, 8.75)];
    [UIColor.whiteColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];

    CGContextRestoreGState(context);


    //// Bezier 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10, 15);
    CGContextScaleCTM(context, 0.7, 0.8);

    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(12.8, 1.76)];
    [bezier2Path addCurveToPoint: CGPointMake(15, 6) controlPoint1: CGPointMake(14.27, 2.93) controlPoint2: CGPointMake(15, 4.46)];
    [bezier2Path addLineToPoint: CGPointMake(15, 10)];
    [bezier2Path addLineToPoint: CGPointMake(13.09, 10)];
    [bezier2Path addLineToPoint: CGPointMake(1.91, 10)];
    [bezier2Path addLineToPoint: CGPointMake(0, 10)];
    [bezier2Path addLineToPoint: CGPointMake(0, 6)];
    [bezier2Path addCurveToPoint: CGPointMake(2.2, 1.76) controlPoint1: CGPointMake(-0, 4.46) controlPoint2: CGPointMake(0.73, 2.93)];
    [bezier2Path addCurveToPoint: CGPointMake(12.8, 1.76) controlPoint1: CGPointMake(5.13, -0.59) controlPoint2: CGPointMake(9.87, -0.59)];
    [bezier2Path closePath];
    [UIColor.whiteColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];

    CGContextRestoreGState(context);
}

+ (void)drawQuestionMark;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval 5 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 15, 15);

    CGRect oval5Rect = CGRectMake(-12.5, -12.5, 25, 25);
    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: oval5Rect];
    [UIColor.whiteColor setStroke];
    oval5Path.lineWidth = 1;
    [oval5Path stroke];
    {
        NSString* textContent = @"?";
        UIFont* oval5Font = [UIFont fontWithName: @"Thonburi-Bold" size: 20];
        [UIColor.whiteColor setFill];
        [textContent drawInRect: CGRectOffset(oval5Rect, 0, (CGRectGetHeight(oval5Rect) - [textContent sizeWithFont: oval5Font constrainedToSize: oval5Rect.size lineBreakMode: UILineBreakModeWordWrap].height) / 2) withFont: oval5Font lineBreakMode: UILineBreakModeWordWrap alignment: UITextAlignmentCenter];
    }

    CGContextRestoreGState(context);
}

+ (void)drawOpenLock;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10, 14);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(-6, -4.5, 12, 9) cornerRadius: 1];
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];

    CGContextRestoreGState(context);


    //// Group
    {
        //// Bezier Drawing
        UIBezierPath* bezierPath = UIBezierPath.bezierPath;
        [bezierPath moveToPoint: CGPointMake(6.25, 5.5)];
        [bezierPath addCurveToPoint: CGPointMake(7.35, 3.03) controlPoint1: CGPointMake(6.25, 4.6) controlPoint2: CGPointMake(6.62, 3.71)];
        [bezierPath addCurveToPoint: CGPointMake(12.65, 3.03) controlPoint1: CGPointMake(8.81, 1.66) controlPoint2: CGPointMake(11.19, 1.66)];
        [bezierPath addCurveToPoint: CGPointMake(13.36, 3.95) controlPoint1: CGPointMake(12.95, 3.3) controlPoint2: CGPointMake(13.19, 3.62)];
        [UIColor.whiteColor setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
        [bezier2Path moveToPoint: CGPointMake(6.25, 5.5)];
        [bezier2Path addLineToPoint: CGPointMake(6.25, 9.5)];
        [UIColor.whiteColor setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];
    }


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
    [bezier3Path moveToPoint: CGPointMake(6.5, 12.5)];
    [bezier3Path addCurveToPoint: CGPointMake(13.5, 12.5) controlPoint1: CGPointMake(13.5, 12.5) controlPoint2: CGPointMake(13.5, 12.5)];
    [UIColor.whiteColor setStroke];
    bezier3Path.lineWidth = 1;
    [bezier3Path stroke];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = UIBezierPath.bezierPath;
    [bezier4Path moveToPoint: CGPointMake(6.5, 15.5)];
    [bezier4Path addCurveToPoint: CGPointMake(13.5, 15.5) controlPoint1: CGPointMake(13.5, 15.5) controlPoint2: CGPointMake(13.5, 15.5)];
    [UIColor.whiteColor setStroke];
    bezier4Path.lineWidth = 1;
    [bezier4Path stroke];
}

+ (void)drawClosedLock;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10, 14);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(-6, -4.5, 12, 9) cornerRadius: 1];
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];

    CGContextRestoreGState(context);


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(6.25, 5.5)];
    [bezierPath addCurveToPoint: CGPointMake(7.35, 3.03) controlPoint1: CGPointMake(6.25, 4.6) controlPoint2: CGPointMake(6.62, 3.71)];
    [bezierPath addCurveToPoint: CGPointMake(12.65, 3.03) controlPoint1: CGPointMake(8.81, 1.66) controlPoint2: CGPointMake(11.19, 1.66)];
    [bezierPath addCurveToPoint: CGPointMake(13.75, 5.5) controlPoint1: CGPointMake(13.38, 3.71) controlPoint2: CGPointMake(13.75, 4.6)];
    [UIColor.whiteColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(6.25, 5.5)];
    [bezier2Path addLineToPoint: CGPointMake(6.25, 9.5)];
    [UIColor.whiteColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
    [bezier3Path moveToPoint: CGPointMake(6.5, 12.5)];
    [bezier3Path addCurveToPoint: CGPointMake(13.5, 12.5) controlPoint1: CGPointMake(13.5, 12.5) controlPoint2: CGPointMake(13.5, 12.5)];
    [UIColor.whiteColor setStroke];
    bezier3Path.lineWidth = 1;
    [bezier3Path stroke];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = UIBezierPath.bezierPath;
    [bezier4Path moveToPoint: CGPointMake(6.5, 15.5)];
    [bezier4Path addCurveToPoint: CGPointMake(13.5, 15.5) controlPoint1: CGPointMake(13.5, 15.5) controlPoint2: CGPointMake(13.5, 15.5)];
    [UIColor.whiteColor setStroke];
    bezier4Path.lineWidth = 1;
    [bezier4Path stroke];


    //// Bezier 5 Drawing
    UIBezierPath* bezier5Path = UIBezierPath.bezierPath;
    [bezier5Path moveToPoint: CGPointMake(13.75, 5.5)];
    [bezier5Path addLineToPoint: CGPointMake(13.75, 9.5)];
    [UIColor.whiteColor setStroke];
    bezier5Path.lineWidth = 1;
    [bezier5Path stroke];
}

+ (void)drawRadio;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10, 10);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-7, -7, 14, 14)];
    [UIColor.whiteColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawSelectedRadio;
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Gradient Declarations
    CGFloat gradientLocations[] = {0, 0.29, 1};
    CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)PaintCodeImages.snapollHighlightGreen.CGColor, (id)[UIColor colorWithRed: 0.4 green: 1 blue: 0.752 alpha: 1].CGColor, (id)PaintCodeImages.snapollGreen.CGColor], gradientLocations);

    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10, 10);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-7, -7, 14, 14)];
    [UIColor.whiteColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];

    CGContextRestoreGState(context);


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10, 10);

    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-6.5, -6.5, 13, 13)];
    CGContextSaveGState(context);
    [oval2Path addClip];
    CGContextDrawRadialGradient(context, gradient,
        CGPointMake(0, 0), 6.42,
        CGPointMake(0, 0), 1.82,
        kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);


    //// Cleanup
    CGGradientRelease(gradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCheckBox;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10.5, 10.5);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(-7, -7, 14, 14) cornerRadius: 2];
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawSelectedCheckBox;
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Gradient Declarations
    CGFloat gradientLocations[] = {0, 0.29, 1};
    CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)PaintCodeImages.snapollHighlightGreen.CGColor, (id)[UIColor colorWithRed: 0.4 green: 1 blue: 0.752 alpha: 1].CGColor, (id)PaintCodeImages.snapollGreen.CGColor], gradientLocations);

    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10.5, 10.5);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(-7, -7, 14, 14) cornerRadius: 2];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawRadialGradient(context, gradient,
        CGPointMake(0, 0), 8.3,
        CGPointMake(0, 0), 0.89,
        kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    CGContextRestoreGState(context);
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];

    CGContextRestoreGState(context);


    //// Cleanup
    CGGradientRelease(gradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawSpeedDial;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0.8 green: 0.32 blue: 0.32 alpha: 1];
    UIColor* lightRedColor = [UIColor colorWithRed: 1 green: 0.34 blue: 0.34 alpha: 1];

    //// Variable Declarations
    CGFloat rotation = -1;
    UIColor* expression2 = rotation > 180 ? lightRedColor : PaintCodeImages.snapollGreen;

    //// Oval Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10, 10);

    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-7.5, -7.5, 15, 15)];
    [PaintCodeImages.snapollGreen setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];

    CGContextRestoreGState(context);


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10, 10);

    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-5, -5, 10, 10)];
    [expression2 setFill];
    [oval2Path fill];
    [PaintCodeImages.snapollGreen setStroke];
    oval2Path.lineWidth = 2.5;
    CGFloat oval2Pattern[] = {0.5, 2};
    [oval2Path setLineDash: oval2Pattern count: 2 phase: 0];
    [oval2Path stroke];

    CGContextRestoreGState(context);


    //// Rectangle Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 10, 10);
    CGContextRotateCTM(context, -rotation * M_PI / 180);

    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(-0.5, -7, 1, 7)];
    [color setFill];
    [rectanglePath fill];

    CGContextRestoreGState(context);
}

#pragma mark Generated Images

+ (UIImage*)imageOfCanvas1;
{
    if (_imageOfCanvas1)
        return _imageOfCanvas1;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(240, 120), NO, 0.0f);
    [PaintCodeImages drawCanvas1];
    _imageOfCanvas1 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas1;
}

+ (UIImage*)imageOfCircleXIcon;
{
    if (_imageOfCircleXIcon)
        return _imageOfCircleXIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(39, 39), NO, 0.0f);
    [PaintCodeImages drawCircleXIcon];
    _imageOfCircleXIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCircleXIcon;
}

+ (UIImage*)imageOfCirclePlusIconWithSelected: (BOOL)selected;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(39, 39), NO, 0.0f);
    [PaintCodeImages drawCirclePlusIconWithSelected: selected];
    UIImage* imageOfCirclePlusIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfCirclePlusIcon;
}

+ (UIImage*)imageOfCirclePlus;
{
    if (_imageOfCirclePlus)
        return _imageOfCirclePlus;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 29), NO, 0.0f);
    [PaintCodeImages drawCirclePlus];
    _imageOfCirclePlus = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCirclePlus;
}

+ (UIImage*)imageOfCircleXBadge;
{
    if (_imageOfCircleXBadge)
        return _imageOfCircleXBadge;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawCircleXBadge];
    _imageOfCircleXBadge = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCircleXBadge;
}

+ (UIImage*)imageOfCircleLeftBackArrow;
{
    if (_imageOfCircleLeftBackArrow)
        return _imageOfCircleLeftBackArrow;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawCircleLeftBackArrow];
    _imageOfCircleLeftBackArrow = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCircleLeftBackArrow;
}

+ (UIImage*)imageOfEmailSymbol;
{
    if (_imageOfEmailSymbol)
        return _imageOfEmailSymbol;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawEmailSymbol];
    _imageOfEmailSymbol = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfEmailSymbol;
}

+ (UIImage*)imageOfFacebookSymbol;
{
    if (_imageOfFacebookSymbol)
        return _imageOfFacebookSymbol;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawFacebookSymbol];
    _imageOfFacebookSymbol = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfFacebookSymbol;
}

+ (UIImage*)imageOfTwitterSymbol;
{
    if (_imageOfTwitterSymbol)
        return _imageOfTwitterSymbol;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawTwitterSymbol];
    _imageOfTwitterSymbol = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfTwitterSymbol;
}

+ (UIImage*)imageOfLoginBackground;
{
    if (_imageOfLoginBackground)
        return _imageOfLoginBackground;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(640, 1136), NO, 0.0f);
    [PaintCodeImages drawLoginBackground];
    _imageOfLoginBackground = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLoginBackground;
}

+ (UIImage*)imageOfBBPlaceholderAvatar;
{
    if (_imageOfBBPlaceholderAvatar)
        return _imageOfBBPlaceholderAvatar;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(31, 31), NO, 0.0f);
    [PaintCodeImages drawBBPlaceholderAvatar];
    _imageOfBBPlaceholderAvatar = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfBBPlaceholderAvatar;
}

+ (UIImage*)imageOfCanvas2;
{
    if (_imageOfCanvas2)
        return _imageOfCanvas2;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(71, 45), NO, 0.0f);
    [PaintCodeImages drawCanvas2];
    _imageOfCanvas2 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas2;
}

+ (UIImage*)imageOfCirclePlusIconHighlighted;
{
    if (_imageOfCirclePlusIconHighlighted)
        return _imageOfCirclePlusIconHighlighted;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(39, 39), NO, 0.0f);
    [PaintCodeImages drawCirclePlusIconHighlighted];
    _imageOfCirclePlusIconHighlighted = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCirclePlusIconHighlighted;
}

+ (UIImage*)imageOfFacebookLoginWithSelected: (BOOL)selected;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), NO, 0.0f);
    [PaintCodeImages drawFacebookLoginWithSelected: selected];
    UIImage* imageOfFacebookLogin = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfFacebookLogin;
}

+ (UIImage*)imageOfTwitterLoginWithSelected: (BOOL)selected;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), NO, 0.0f);
    [PaintCodeImages drawTwitterLoginWithSelected: selected];
    UIImage* imageOfTwitterLogin = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfTwitterLogin;
}

+ (UIImage*)imageOfEmailLoginWithSelected: (BOOL)selected;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), NO, 0.0f);
    [PaintCodeImages drawEmailLoginWithSelected: selected];
    UIImage* imageOfEmailLogin = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfEmailLogin;
}

+ (UIImage*)imageOfLoginLockWithLockRotation: (CGFloat)lockRotation;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 50), NO, 0.0f);
    [PaintCodeImages drawLoginLockWithLockRotation: lockRotation];
    UIImage* imageOfLoginLock = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfLoginLock;
}

+ (UIImage*)imageOfLoginSliderWithSelected: (BOOL)selected;
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(35, 160), NO, 0.0f);
    [PaintCodeImages drawLoginSliderWithSelected: selected];
    UIImage* imageOfLoginSlider = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfLoginSlider;
}

+ (UIImage*)imageOfProfileBackground;
{
    if (_imageOfProfileBackground)
        return _imageOfProfileBackground;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(220, 230), NO, 0.0f);
    [PaintCodeImages drawProfileBackground];
    _imageOfProfileBackground = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfProfileBackground;
}

+ (UIImage*)imageOfEventIcon;
{
    if (_imageOfEventIcon)
        return _imageOfEventIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawEventIcon];
    _imageOfEventIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfEventIcon;
}

+ (UIImage*)imageOfPollIcon;
{
    if (_imageOfPollIcon)
        return _imageOfPollIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawPollIcon];
    _imageOfPollIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfPollIcon;
}

+ (UIImage*)imageOfAddIcon;
{
    if (_imageOfAddIcon)
        return _imageOfAddIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(25, 25), NO, 0.0f);
    [PaintCodeImages drawAddIcon];
    _imageOfAddIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfAddIcon;
}

+ (UIImage*)imageOfMinusIcon;
{
    if (_imageOfMinusIcon)
        return _imageOfMinusIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawMinusIcon];
    _imageOfMinusIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfMinusIcon;
}

+ (UIImage*)imageOfCircleRightBackArrow;
{
    if (_imageOfCircleRightBackArrow)
        return _imageOfCircleRightBackArrow;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawCircleRightBackArrow];
    _imageOfCircleRightBackArrow = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCircleRightBackArrow;
}

+ (UIImage*)imageOfEdit;
{
    if (_imageOfEdit)
        return _imageOfEdit;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawEdit];
    _imageOfEdit = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfEdit;
}

+ (UIImage*)imageOfClock;
{
    if (_imageOfClock)
        return _imageOfClock;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawClock];
    _imageOfClock = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfClock;
}

+ (UIImage*)imageOfLocationPin;
{
    if (_imageOfLocationPin)
        return _imageOfLocationPin;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawLocationPin];
    _imageOfLocationPin = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLocationPin;
}

+ (UIImage*)imageOfPerson;
{
    if (_imageOfPerson)
        return _imageOfPerson;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawPerson];
    _imageOfPerson = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfPerson;
}

+ (UIImage*)imageOfQuestionMark;
{
    if (_imageOfQuestionMark)
        return _imageOfQuestionMark;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(30, 30), NO, 0.0f);
    [PaintCodeImages drawQuestionMark];
    _imageOfQuestionMark = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfQuestionMark;
}

+ (UIImage*)imageOfOpenLock;
{
    if (_imageOfOpenLock)
        return _imageOfOpenLock;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(20, 20), NO, 0.0f);
    [PaintCodeImages drawOpenLock];
    _imageOfOpenLock = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfOpenLock;
}

+ (UIImage*)imageOfClosedLock;
{
    if (_imageOfClosedLock)
        return _imageOfClosedLock;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(20, 20), NO, 0.0f);
    [PaintCodeImages drawClosedLock];
    _imageOfClosedLock = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfClosedLock;
}

+ (UIImage*)imageOfRadio;
{
    if (_imageOfRadio)
        return _imageOfRadio;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(20, 20), NO, 0.0f);
    [PaintCodeImages drawRadio];
    _imageOfRadio = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfRadio;
}

+ (UIImage*)imageOfSelectedRadio;
{
    if (_imageOfSelectedRadio)
        return _imageOfSelectedRadio;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(20, 20), NO, 0.0f);
    [PaintCodeImages drawSelectedRadio];
    _imageOfSelectedRadio = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSelectedRadio;
}

+ (UIImage*)imageOfCheckBox;
{
    if (_imageOfCheckBox)
        return _imageOfCheckBox;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(20, 20), NO, 0.0f);
    [PaintCodeImages drawCheckBox];
    _imageOfCheckBox = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCheckBox;
}

+ (UIImage*)imageOfSelectedCheckBox;
{
    if (_imageOfSelectedCheckBox)
        return _imageOfSelectedCheckBox;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(20, 20), NO, 0.0f);
    [PaintCodeImages drawSelectedCheckBox];
    _imageOfSelectedCheckBox = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSelectedCheckBox;
}

+ (UIImage*)imageOfSpeedDial;
{
    if (_imageOfSpeedDial)
        return _imageOfSpeedDial;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(20, 20), NO, 0.0f);
    [PaintCodeImages drawSpeedDial];
    _imageOfSpeedDial = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSpeedDial;
}

#pragma mark Customization Infrastructure

- (void)setCanvas1Targets: (NSArray*)canvas1Targets
{
    _canvas1Targets = canvas1Targets;

    for (id target in self.canvas1Targets)
        [target setImage: PaintCodeImages.imageOfCanvas1];
}

- (void)setCircleXIconTargets: (NSArray*)circleXIconTargets
{
    _circleXIconTargets = circleXIconTargets;

    for (id target in self.circleXIconTargets)
        [target setImage: PaintCodeImages.imageOfCircleXIcon];
}

- (void)setCirclePlusTargets: (NSArray*)circlePlusTargets
{
    _circlePlusTargets = circlePlusTargets;

    for (id target in self.circlePlusTargets)
        [target setImage: PaintCodeImages.imageOfCirclePlus];
}

- (void)setCircleXBadgeTargets: (NSArray*)circleXBadgeTargets
{
    _circleXBadgeTargets = circleXBadgeTargets;

    for (id target in self.circleXBadgeTargets)
        [target setImage: PaintCodeImages.imageOfCircleXBadge];
}

- (void)setCircleLeftBackArrowTargets: (NSArray*)circleLeftBackArrowTargets
{
    _circleLeftBackArrowTargets = circleLeftBackArrowTargets;

    for (id target in self.circleLeftBackArrowTargets)
        [target setImage: PaintCodeImages.imageOfCircleLeftBackArrow];
}

- (void)setEmailSymbolTargets: (NSArray*)emailSymbolTargets
{
    _emailSymbolTargets = emailSymbolTargets;

    for (id target in self.emailSymbolTargets)
        [target setImage: PaintCodeImages.imageOfEmailSymbol];
}

- (void)setFacebookSymbolTargets: (NSArray*)facebookSymbolTargets
{
    _facebookSymbolTargets = facebookSymbolTargets;

    for (id target in self.facebookSymbolTargets)
        [target setImage: PaintCodeImages.imageOfFacebookSymbol];
}

- (void)setTwitterSymbolTargets: (NSArray*)twitterSymbolTargets
{
    _twitterSymbolTargets = twitterSymbolTargets;

    for (id target in self.twitterSymbolTargets)
        [target setImage: PaintCodeImages.imageOfTwitterSymbol];
}

- (void)setLoginBackgroundTargets: (NSArray*)loginBackgroundTargets
{
    _loginBackgroundTargets = loginBackgroundTargets;

    for (id target in self.loginBackgroundTargets)
        [target setImage: PaintCodeImages.imageOfLoginBackground];
}

- (void)setBBPlaceholderAvatarTargets: (NSArray*)bBPlaceholderAvatarTargets
{
    _bBPlaceholderAvatarTargets = bBPlaceholderAvatarTargets;

    for (id target in self.bBPlaceholderAvatarTargets)
        [target setImage: PaintCodeImages.imageOfBBPlaceholderAvatar];
}

- (void)setCanvas2Targets: (NSArray*)canvas2Targets
{
    _canvas2Targets = canvas2Targets;

    for (id target in self.canvas2Targets)
        [target setImage: PaintCodeImages.imageOfCanvas2];
}

- (void)setCirclePlusIconHighlightedTargets: (NSArray*)circlePlusIconHighlightedTargets
{
    _circlePlusIconHighlightedTargets = circlePlusIconHighlightedTargets;

    for (id target in self.circlePlusIconHighlightedTargets)
        [target setImage: PaintCodeImages.imageOfCirclePlusIconHighlighted];
}

- (void)setProfileBackgroundTargets: (NSArray*)profileBackgroundTargets
{
    _profileBackgroundTargets = profileBackgroundTargets;

    for (id target in self.profileBackgroundTargets)
        [target setImage: PaintCodeImages.imageOfProfileBackground];
}

- (void)setEventIconTargets: (NSArray*)eventIconTargets
{
    _eventIconTargets = eventIconTargets;

    for (id target in self.eventIconTargets)
        [target setImage: PaintCodeImages.imageOfEventIcon];
}

- (void)setPollIconTargets: (NSArray*)pollIconTargets
{
    _pollIconTargets = pollIconTargets;

    for (id target in self.pollIconTargets)
        [target setImage: PaintCodeImages.imageOfPollIcon];
}

- (void)setAddIconTargets: (NSArray*)addIconTargets
{
    _addIconTargets = addIconTargets;

    for (id target in self.addIconTargets)
        [target setImage: PaintCodeImages.imageOfAddIcon];
}

- (void)setMinusIconTargets: (NSArray*)minusIconTargets
{
    _minusIconTargets = minusIconTargets;

    for (id target in self.minusIconTargets)
        [target setImage: PaintCodeImages.imageOfMinusIcon];
}

- (void)setCircleRightBackArrowTargets: (NSArray*)circleRightBackArrowTargets
{
    _circleRightBackArrowTargets = circleRightBackArrowTargets;

    for (id target in self.circleRightBackArrowTargets)
        [target setImage: PaintCodeImages.imageOfCircleRightBackArrow];
}

- (void)setEditTargets: (NSArray*)editTargets
{
    _editTargets = editTargets;

    for (id target in self.editTargets)
        [target setImage: PaintCodeImages.imageOfEdit];
}

- (void)setClockTargets: (NSArray*)clockTargets
{
    _clockTargets = clockTargets;

    for (id target in self.clockTargets)
        [target setImage: PaintCodeImages.imageOfClock];
}

- (void)setLocationPinTargets: (NSArray*)locationPinTargets
{
    _locationPinTargets = locationPinTargets;

    for (id target in self.locationPinTargets)
        [target setImage: PaintCodeImages.imageOfLocationPin];
}

- (void)setPersonTargets: (NSArray*)personTargets
{
    _personTargets = personTargets;

    for (id target in self.personTargets)
        [target setImage: PaintCodeImages.imageOfPerson];
}

- (void)setQuestionMarkTargets: (NSArray*)questionMarkTargets
{
    _questionMarkTargets = questionMarkTargets;

    for (id target in self.questionMarkTargets)
        [target setImage: PaintCodeImages.imageOfQuestionMark];
}

- (void)setOpenLockTargets: (NSArray*)openLockTargets
{
    _openLockTargets = openLockTargets;

    for (id target in self.openLockTargets)
        [target setImage: PaintCodeImages.imageOfOpenLock];
}

- (void)setClosedLockTargets: (NSArray*)closedLockTargets
{
    _closedLockTargets = closedLockTargets;

    for (id target in self.closedLockTargets)
        [target setImage: PaintCodeImages.imageOfClosedLock];
}

- (void)setRadioTargets: (NSArray*)radioTargets
{
    _radioTargets = radioTargets;

    for (id target in self.radioTargets)
        [target setImage: PaintCodeImages.imageOfRadio];
}

- (void)setSelectedRadioTargets: (NSArray*)selectedRadioTargets
{
    _selectedRadioTargets = selectedRadioTargets;

    for (id target in self.selectedRadioTargets)
        [target setImage: PaintCodeImages.imageOfSelectedRadio];
}

- (void)setCheckBoxTargets: (NSArray*)checkBoxTargets
{
    _checkBoxTargets = checkBoxTargets;

    for (id target in self.checkBoxTargets)
        [target setImage: PaintCodeImages.imageOfCheckBox];
}

- (void)setSelectedCheckBoxTargets: (NSArray*)selectedCheckBoxTargets
{
    _selectedCheckBoxTargets = selectedCheckBoxTargets;

    for (id target in self.selectedCheckBoxTargets)
        [target setImage: PaintCodeImages.imageOfSelectedCheckBox];
}

- (void)setSpeedDialTargets: (NSArray*)speedDialTargets
{
    _speedDialTargets = speedDialTargets;

    for (id target in self.speedDialTargets)
        [target setImage: PaintCodeImages.imageOfSpeedDial];
}


@end
